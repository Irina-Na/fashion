# app.py
import os
import streamlit as st
import pandas as pd
from stylist_core import generate_look, filter_dataset

st.set_page_config(page_title="Fashion Look Finder", layout="wide")
st.title("üëó Total-Look Stylist")

# --- –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ ---
@st.cache_data(show_spinner="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç‚Ä¶")
def load_data(path: str) -> pd.DataFrame:
    return pd.read_parquet(path)  # –∏–ª–∏ CSV/SQL ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç

DATA_PATH = st.sidebar.text_input(
    "–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É (parquet/CSV)", value="df_enriched.parquet"
)
if DATA_PATH and os.path.isfile(DATA_PATH):
    df_enriched = load_data(DATA_PATH)
    st.sidebar.success("–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    st.sidebar.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    st.stop()

# --- –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_query = st.text_area(
    "–û–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞–∑ (–ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)",
    "–ú–Ω–µ –Ω—É–∂–µ–Ω –æ–±—Ä–∞–∑ –Ω–∞ –≤—ã–ø—É—Å–∫–Ω–æ–π –≤ –Ω–µ–∂–Ω—ã—Ö –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–Ω–∞—Ö, –ª–µ—Ç–æ, –∂–µ–Ω—Å–∫–∏–π.",
    height=120,
)

api_key = st.sidebar.text_input(
    "OpenAI API key (–µ—Å–ª–∏ –Ω–µ –≤ ENV/Secrets)",
    type="password",
    value=os.getenv("OPENAI_API_KEY", ""),
)
if api_key:
    os.environ["OPENAI_API_KEY"] = api_key

model_choice = st.sidebar.selectbox(
    "LLM –º–æ–¥–µ–ª—å", ["gpt-4o-mini", "gpt-4o", "gpt-4"], index=0
)

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—É–∫"):
    with st.spinner("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∞-–ò–ò‚Ä¶"):
        look = generate_look(user_query, model=model_choice)
    st.success("–û–±—Ä–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    st.write("### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ª—É–∫–∞")
    st.json(look.model_dump(), expanded=False)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
    with st.spinner("–ü–æ–¥–±–∏—Ä–∞–µ–º –≤–µ—â–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞‚Ä¶"):
        results = filter_dataset(df_enriched, look)

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü
    for part, df_part in results.items():
        if not df_part.empty:
            st.subheader(part.capitalize())
            st.dataframe(df_part, use_container_width=True)
        else:
            st.write(f"_{part}: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–µ—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_")
